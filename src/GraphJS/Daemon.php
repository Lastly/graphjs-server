<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace GraphJS;

use Composer\Autoload\ClassLoader;
use Pho\Kernel\Kernel;
use PhoNetworksAutogenerated\{User, Site, Network};
use CapMousse\ReactRestify\Http\Session;
use Pho\Plugins\FeedPlugin;

/**
 * The async/event-driven REST server daemon
 * 
 * @author Emre Sokullu <emre@phonetworks.org>
 */
class Daemon extends \Pho\Server\Rest\Daemon
{
    protected $configs_file = "";
    protected $heroku = false;
    
    public function __construct(string $configs = "", string $cors = "", bool $heroku = false)
    {
        $this->heroku = $heroku;
        $this->configs_file = $configs;
        $this->server = new Server();
        $this->server->setAccessControlAllowOrigin("*");
        $this->initKernel();
        $this->initControllers(__DIR__, false);
        Router::init2($this->server, $this->controllers, $this->kernel, $cors);
    }

    protected function initKernel(): void
    {
        if($this->heroku) {
            include __DIR__ . '/../../inc/heroku.php';
        }
        else {
            $configs_file = $this->configs_file;
            if(empty($this->configs_file)) {
                $configs_file = __DIR__ . '/../../';
            }
            $dotenv = new \Dotenv\Dotenv($configs_file);
            $dotenv->load();
        }
        $this->configureEnvironmentVariable();
        $this->configureAutoloading();
        $configs = array(
            "services"=>array(
                "database" => ["type" => getenv('DATABASE_TYPE'), "uri" => getenv('DATABASE_URI')],
                "storage" => ["type" => getenv('STORAGE_TYPE'), "uri" =>  getenv("STORAGE_URI")],
                "index" => ["type" => getenv('INDEX_TYPE'), "uri" => getenv('INDEX_URI')]
            ),
            "default_objects" => array(
                    "graph" => getenv('INSTALLATION_TYPE') === 'groupsv2' ? \PhoNetworksAutogenerated\Network::class : \PhoNetworksAutogenerated\Site::class,
                    "founder" => \PhoNetworksAutogenerated\User::class,
                    "actor" => \PhoNetworksAutogenerated\User::class
            )
        );
        $this->kernel = new \Pho\Kernel\Kernel($configs);
        if(!empty(getenv("STREAM_KEY"))&&!empty(getenv("STREAM_SECRET"))) {
            $feedplugin = new FeedPlugin($this->kernel,  getenv('STREAM_KEY'),  getenv('STREAM_SECRET'));
            $this->kernel->registerPlugin($feedplugin);
        }
        $founder = new \PhoNetworksAutogenerated\User(
            $this->kernel, $this->kernel->space(), 
            getenv('FOUNDER_NICKNAME'), 
            getenv('FOUNDER_EMAIL'), 
            getenv('FOUNDER_PASSWORD')
        );
        $this->kernel->boot($founder);
    }

    protected function configureAutoloading()
    {
        global $composerClassLoader;
        $installationType = getenv('INSTALLATION_TYPE');

        // Remove psr4 directory registered from composer.json of libraries
        // Should be called before any class is loaded from this directory
        $composerClassLoader->setPsr4('Pho\\Kernel\\Services\\Index\\Adapters\\', []);
        $composerClassLoader->setPsr4('PhoNetworksAutogenerated\\', []);

        if ($installationType === 'graphjs') {
            $this->useIndexRedis($composerClassLoader);
            $this->useRecipeWeb($composerClassLoader);
        }
        elseif ($installationType === 'groupsv2') {
            $this->useIndexRedis($composerClassLoader);
            $this->useRecipeNetwork($composerClassLoader);
        }
        else {
            $this->useIndexNeo4j($composerClassLoader);
            $this->useRecipeWeb($composerClassLoader);
        }
    }

    private function useIndexNeo4j(ClassLoader $classLoader)
    {
        $classLoader->setPsr4('Pho\\Kernel\\Services\\Index\\Adapters\\', APP_ROOT . '/vendor/pho-adapters/index-neo4j');
    }

    private function useIndexRedis(ClassLoader $classLoader)
    {
        $classLoader->setPsr4('Pho\\Kernel\\Services\\Index\\Adapters\\', APP_ROOT . '/vendor/pho-adapters/index-redis');
    }

    private function useRecipeWeb(ClassLoader $classLoader)
    {
        $classLoader->setPsr4('PhoNetworksAutogenerated\\', APP_ROOT . '/vendor/pho-recipes/web/.compiled');
    }

    private function useRecipeNetwork(ClassLoader $classLoader)
    {
        $classLoader->setPsr4('PhoNetworksAutogenerated\\', APP_ROOT . '/vendor/pho-recipes/network/.compiled');
    }

    protected function configureEnvironmentVariable()
    {
        $installationType = getenv('INSTALLATION_TYPE');
        if (in_array($installationType, [ 'graphjs', 'groupsv2' ])) {
            putenv('PASSWORD_REMINDER_ON_REDIS=1');
        }
    }
}

